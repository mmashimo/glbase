TODOs:
-----

Dev To do:
---------
[ ] - Add functionality to mouse/key/etc.
[ ] - Replace "add" with "<<" operators
[ ] - Separate "registerTimer" from "initializeTimer" (one registers timer object,
      the other (init) enables timer for an object
	[ ] - Iterate through objects
	[ ] - If ambitious, have timer-index based tuple<int, func>
[ ] - Add mouse action/move context
[ ] - Add links to glui

To Dos - Basics:
---------------
[ ] - Add Key/Mouse Responses
	[ ] - Add method to rotate
	[ ] - Add method to pan (multiple key and mouse response)
  [ ] - Object select
    [ ] - Selected menu, etc.
[ ] - Add arc-ball transformations
	[ ] - Add line from center to the Mouse cursor
	[ ] - Add method to spin
	[ ] - Add method to pan
[ ] - Separate callback functions into a module:
	[ ] - Paint and resize (possibly together)
	[ ] - keyboard function
	[ ] - Special key function
	[ ] - Mouse functions
[ ] - Add something like GetAsyncKeyState (determine key state line L/R Shift) to keyboard or special key functions
[ ] - 2D Objects
  [ ] - Need full implementation of GLUI
	[ ] - Simple gnu-plot like implementation.
		[ ] - Single "channel"
		[ ] - Multiple channel - individual waveform controls
		[ ] - Multiple channel - common controls
    [ ] - toolbar highlights
[ ] - See if SDL is possible


[ ] - Add Cling (https://root.cern.ch/cling) - CInt equivalent C++ interactive (interpreted)
  C++ framework.

- Initialization with (JSON?)


This includes 3D-objects  using OpenGL objects through use
of Object-Oriented Designs (OOD) similar to View-Model construct, except without the confusing
interfaces between them - perhaps the reason why OOD is falling out of favor.
The simplicity of object-oriented programming is derived from the Data-Layer up rather than
the web-designer's model of programming View-layer down. In an analogy, cars are built
from engine, drive-train and suspensions. Without them, the purpose of having a car is lost.
Lastly, the exterior and interior designs are left to artists with knowledge of aerodynamics
and interpretation "comfort".

Rants:
- I have to use Windoze - not that it is necessary, but most of the original
  development was done on it. There are tons of quirks associated with Win-OS
  that I can probably fill a bool with it. Worse, we had to use MS-SDK and MDC
  and (shudder) ATL/COM, which can make our lives very difficult on top of what
  is really not a "real" real-time operating system - sorry, it's the way it is.
  I have used Linux and Unix equivalent operating systems pretty much all my
  software development life. I am a researcher. Linux still remains to be the
  "real" real-time operating system for PC with very nice stuff. This makes it
  ideal for prototyping scientific software as opposed to games and pretty
  things (I am not saying Windoze is bad for it). In scientific pursuits, we
  need to understand the underlying data - it is not always pretty - but it
  would be nice. I like to make this association with buying a car by opening
  the hood and test driving on a track as opposed to getting it for the looks
  or the number of cup holders. This design construct is not for everyone.
- The other part of this project is to return to the fundamental concept(s) of
  object-oriented programming. Yeah - many brilliant people have pOOP-poo'ed
  them and I can feel their aggravations with this style of programming. I was
  on that bandwagon for years.
  However, those who invented the design paradigm (at Xerox PARC) were
  visionaries who understood real-world applications, not just "tasks".
  The design concept is amazingly logical, consistent, and simple. A testament
  to the reason why it remained unchanged over time. This is not the same for
  Java or C++, unfortunately, because "how" we program does not jive with
  "what" or "why" we are programming. This is very similar to the way the
  government "should run". If you become part of a governing body, you will
  soon realize that people who want to change things really do not know the
  underlying problem(s), concept(s) or solution(s). Worse, we, as citizens,
  want someone else (the government) to fix things that bother us instead of
  working with or around the issues. The "how" and "who" are basically the
  reasons why political parties exists fueled by the dark-and-hidden human
  side of fear that things unknown or solved by others are left to be criticized.
  This leaves many of us who side with the pervaying ideas and concept and form
  groups that "think like us". This has become the unfortunate epitaph of
  object-oriented design and programming. Sad but true.
- There are 4 basic tenants of OO-programming: inheritance, abstraction,
  encapsulation and polymorphism. It is critical to understand that these are
  software design concepts, or better put, software design tools. It does not
  apply for every software programming under the sun. The fundamental problem
  boils down to the idea that "if you have a hammer, the entire world is a nail".
  If you are simulating real-world objects or creating a mathematical model,
  this design paradigm is ideal. However, if you are designing websites or GUI,
  it is impractical. The reason is rather simple but multi-fold: (1) people
  have different ideas of how "objects" should interact with them; (2) no two
  people are alike including identical twins; and (3) it is practically
  impossible to satisfy everyone every time. Do not even try to put your head
  around the latter - people who have tried eventually become mental-incapacitated
  or serial killers.
  Having a compact "class" design leads us back to the concept of model-view
  controller (MVC). It started simple and well-meaning, but variants took over
  such as Microsoft's Model-View View-Model (MVVM). This simplification 
  depreicated MVC until it was understood that the underlying mechanism of 
  web-framework is best done in MVC - like Ajax. But it should be noted that
  without understanding the underlying object-oriented programming, this and
  its derivatives will eventually meet an equally gruesome fate.
- So, some of the disadvantages of MVC is not always applicable to those who
  are interested in using an established tool as opposed to designing an
  application from scratch. If one understands OOD and MVC, this tool is for you.


#define 	GLFW_KEY_UNKNOWN   -1
 
#define 	GLFW_KEY_SPACE   32
 
#define 	GLFW_KEY_APOSTROPHE   39 /* ' */
 
#define 	GLFW_KEY_COMMA   44 /* , */
 
#define 	GLFW_KEY_MINUS   45 /* - */
 
#define 	GLFW_KEY_PERIOD   46 /* . */
 
#define 	GLFW_KEY_SLASH   47 /* / */
 
#define 	GLFW_KEY_0   48
 
#define 	GLFW_KEY_1   49
 
#define 	GLFW_KEY_2   50
 
#define 	GLFW_KEY_3   51
 
#define 	GLFW_KEY_4   52
 
#define 	GLFW_KEY_5   53
 
#define 	GLFW_KEY_6   54
 
#define 	GLFW_KEY_7   55
 
#define 	GLFW_KEY_8   56
 
#define 	GLFW_KEY_9   57
 
#define 	GLFW_KEY_SEMICOLON   59 /* ; */
 
#define 	GLFW_KEY_EQUAL   61 /* = */
 
#define 	GLFW_KEY_A   65
 
#define 	GLFW_KEY_B   66
 
#define 	GLFW_KEY_C   67
 
#define 	GLFW_KEY_D   68
 
#define 	GLFW_KEY_E   69
 
#define 	GLFW_KEY_F   70
 
#define 	GLFW_KEY_G   71
 
#define 	GLFW_KEY_H   72
 
#define 	GLFW_KEY_I   73
 
#define 	GLFW_KEY_J   74
 
#define 	GLFW_KEY_K   75
 
#define 	GLFW_KEY_L   76
 
#define 	GLFW_KEY_M   77
 
#define 	GLFW_KEY_N   78
 
#define 	GLFW_KEY_O   79
 
#define 	GLFW_KEY_P   80
 
#define 	GLFW_KEY_Q   81
 
#define 	GLFW_KEY_R   82
 
#define 	GLFW_KEY_S   83
 
#define 	GLFW_KEY_T   84
 
#define 	GLFW_KEY_U   85
 
#define 	GLFW_KEY_V   86
 
#define 	GLFW_KEY_W   87
 
#define 	GLFW_KEY_X   88
 
#define 	GLFW_KEY_Y   89
 
#define 	GLFW_KEY_Z   90
 
#define 	GLFW_KEY_LEFT_BRACKET   91 /* [ */
 
#define 	GLFW_KEY_BACKSLASH   92 /* \ */
 
#define 	GLFW_KEY_RIGHT_BRACKET   93 /* ] */
 
#define 	GLFW_KEY_GRAVE_ACCENT   96 /* ` */
 
#define 	GLFW_KEY_WORLD_1   161 /* non-US #1 */
 
#define 	GLFW_KEY_WORLD_2   162 /* non-US #2 */
 
#define 	GLFW_KEY_ESCAPE   256
 
#define 	GLFW_KEY_ENTER   257
 
#define 	GLFW_KEY_TAB   258
 
#define 	GLFW_KEY_BACKSPACE   259
 
#define 	GLFW_KEY_INSERT   260
 
#define 	GLFW_KEY_DELETE   261
 
#define 	GLFW_KEY_RIGHT   262
 
#define 	GLFW_KEY_LEFT   263
 
#define 	GLFW_KEY_DOWN   264
 
#define 	GLFW_KEY_UP   265
 
#define 	GLFW_KEY_PAGE_UP   266
 
#define 	GLFW_KEY_PAGE_DOWN   267
 
#define 	GLFW_KEY_HOME   268
 
#define 	GLFW_KEY_END   269
 
#define 	GLFW_KEY_CAPS_LOCK   280
 
#define 	GLFW_KEY_SCROLL_LOCK   281
 
#define 	GLFW_KEY_NUM_LOCK   282
 
#define 	GLFW_KEY_PRINT_SCREEN   283
 
#define 	GLFW_KEY_PAUSE   284
 
#define 	GLFW_KEY_F1   290
 
#define 	GLFW_KEY_F2   291
 
#define 	GLFW_KEY_F3   292
 
#define 	GLFW_KEY_F4   293
 
#define 	GLFW_KEY_F5   294
 
#define 	GLFW_KEY_F6   295
 
#define 	GLFW_KEY_F7   296
 
#define 	GLFW_KEY_F8   297
 
#define 	GLFW_KEY_F9   298
 
#define 	GLFW_KEY_F10   299
 
#define 	GLFW_KEY_F11   300
 
#define 	GLFW_KEY_F12   301
 
#define 	GLFW_KEY_F13   302
 
#define 	GLFW_KEY_F14   303
 
#define 	GLFW_KEY_F15   304
 
#define 	GLFW_KEY_F16   305
 
#define 	GLFW_KEY_F17   306
 
#define 	GLFW_KEY_F18   307
 
#define 	GLFW_KEY_F19   308
 
#define 	GLFW_KEY_F20   309
 
#define 	GLFW_KEY_F21   310
 
#define 	GLFW_KEY_F22   311
 
#define 	GLFW_KEY_F23   312
 
#define 	GLFW_KEY_F24   313
 
#define 	GLFW_KEY_F25   314
 
#define 	GLFW_KEY_KP_0   320
 
#define 	GLFW_KEY_KP_1   321
 
#define 	GLFW_KEY_KP_2   322
 
#define 	GLFW_KEY_KP_3   323
 
#define 	GLFW_KEY_KP_4   324
 
#define 	GLFW_KEY_KP_5   325
 
#define 	GLFW_KEY_KP_6   326
 
#define 	GLFW_KEY_KP_7   327
 
#define 	GLFW_KEY_KP_8   328
 
#define 	GLFW_KEY_KP_9   329
 
#define 	GLFW_KEY_KP_DECIMAL   330
 
#define 	GLFW_KEY_KP_DIVIDE   331
 
#define 	GLFW_KEY_KP_MULTIPLY   332
 
#define 	GLFW_KEY_KP_SUBTRACT   333
 
#define 	GLFW_KEY_KP_ADD   334
 
#define 	GLFW_KEY_KP_ENTER   335
 
#define 	GLFW_KEY_KP_EQUAL   336
 
#define 	GLFW_KEY_LEFT_SHIFT   340
 
#define 	GLFW_KEY_LEFT_CONTROL   341
 
#define 	GLFW_KEY_LEFT_ALT   342
 
#define 	GLFW_KEY_LEFT_SUPER   343
 
#define 	GLFW_KEY_RIGHT_SHIFT   344
 
#define 	GLFW_KEY_RIGHT_CONTROL   345
 
#define 	GLFW_KEY_RIGHT_ALT   346
 
#define 	GLFW_KEY_RIGHT_SUPER   347
 
#define 	GLFW_KEY_MENU   348
 
#define 	GLFW_KEY_LAST   GLFW_KEY_MENU
 
Macro Definition Documentation
#define GLFW_KEY_UNKNOWN   -1
#define GLFW_KEY_SPACE   32
#define GLFW_KEY_APOSTROPHE   39 /* ' */
#define GLFW_KEY_COMMA   44 /* , */
#define GLFW_KEY_MINUS   45 /* - */
#define GLFW_KEY_PERIOD   46 /* . */
#define GLFW_KEY_SLASH   47 /* / */
#define GLFW_KEY_0   48
#define GLFW_KEY_1   49
#define GLFW_KEY_2   50
#define GLFW_KEY_3   51
#define GLFW_KEY_4   52
#define GLFW_KEY_5   53
#define GLFW_KEY_6   54
#define GLFW_KEY_7   55
#define GLFW_KEY_8   56
#define GLFW_KEY_9   57
#define GLFW_KEY_SEMICOLON   59 /* ; */
#define GLFW_KEY_EQUAL   61 /* = */
#define GLFW_KEY_A   65
#define GLFW_KEY_B   66
#define GLFW_KEY_C   67
#define GLFW_KEY_D   68
#define GLFW_KEY_E   69
#define GLFW_KEY_F   70
#define GLFW_KEY_G   71
#define GLFW_KEY_H   72
#define GLFW_KEY_I   73
#define GLFW_KEY_J   74
#define GLFW_KEY_K   75
#define GLFW_KEY_L   76
#define GLFW_KEY_M   77
#define GLFW_KEY_N   78
#define GLFW_KEY_O   79
#define GLFW_KEY_P   80
#define GLFW_KEY_Q   81
#define GLFW_KEY_R   82
#define GLFW_KEY_S   83
#define GLFW_KEY_T   84
#define GLFW_KEY_U   85
#define GLFW_KEY_V   86
#define GLFW_KEY_W   87
#define GLFW_KEY_X   88
#define GLFW_KEY_Y   89
#define GLFW_KEY_Z   90
#define GLFW_KEY_LEFT_BRACKET   91 /* [ */
#define GLFW_KEY_BACKSLASH   92 /* \ */
#define GLFW_KEY_RIGHT_BRACKET   93 /* ] */
#define GLFW_KEY_GRAVE_ACCENT   96 /* ` */
#define GLFW_KEY_WORLD_1   161 /* non-US #1 */
#define GLFW_KEY_WORLD_2   162 /* non-US #2 */
#define GLFW_KEY_ESCAPE   256
#define GLFW_KEY_ENTER   257
#define GLFW_KEY_TAB   258
#define GLFW_KEY_BACKSPACE   259
#define GLFW_KEY_INSERT   260
#define GLFW_KEY_DELETE   261
#define GLFW_KEY_RIGHT   262
#define GLFW_KEY_LEFT   263
#define GLFW_KEY_DOWN   264
#define GLFW_KEY_UP   265
#define GLFW_KEY_PAGE_UP   266
#define GLFW_KEY_PAGE_DOWN   267
#define GLFW_KEY_HOME   268
#define GLFW_KEY_END   269
#define GLFW_KEY_CAPS_LOCK   280
#define GLFW_KEY_SCROLL_LOCK   281
#define GLFW_KEY_NUM_LOCK   282
#define GLFW_KEY_PRINT_SCREEN   283
#define GLFW_KEY_PAUSE   284
#define GLFW_KEY_F1   290
#define GLFW_KEY_F2   291
#define GLFW_KEY_F3   292
#define GLFW_KEY_F4   293
#define GLFW_KEY_F5   294
#define GLFW_KEY_F6   295
#define GLFW_KEY_F7   296
#define GLFW_KEY_F8   297
#define GLFW_KEY_F9   298
#define GLFW_KEY_F10   299
#define GLFW_KEY_F11   300
#define GLFW_KEY_F12   301
#define GLFW_KEY_F13   302
#define GLFW_KEY_F14   303
#define GLFW_KEY_F15   304
#define GLFW_KEY_F16   305
#define GLFW_KEY_F17   306
#define GLFW_KEY_F18   307
#define GLFW_KEY_F19   308
#define GLFW_KEY_F20   309
#define GLFW_KEY_F21   310
#define GLFW_KEY_F22   311
#define GLFW_KEY_F23   312
#define GLFW_KEY_F24   313
#define GLFW_KEY_F25   314
#define GLFW_KEY_KP_0   320
#define GLFW_KEY_KP_1   321
#define GLFW_KEY_KP_2   322
#define GLFW_KEY_KP_3   323
#define GLFW_KEY_KP_4   324
#define GLFW_KEY_KP_5   325
#define GLFW_KEY_KP_6   326
#define GLFW_KEY_KP_7   327
#define GLFW_KEY_KP_8   328
#define GLFW_KEY_KP_9   329
#define GLFW_KEY_KP_DECIMAL   330
#define GLFW_KEY_KP_DIVIDE   331
#define GLFW_KEY_KP_MULTIPLY   332
#define GLFW_KEY_KP_SUBTRACT   333
#define GLFW_KEY_KP_ADD   334
#define GLFW_KEY_KP_ENTER   335
#define GLFW_KEY_KP_EQUAL   336
#define GLFW_KEY_LEFT_SHIFT   340
#define GLFW_KEY_LEFT_CONTROL   341
#define GLFW_KEY_LEFT_ALT   342
#define GLFW_KEY_LEFT_SUPER   343
#define GLFW_KEY_RIGHT_SHIFT   344
#define GLFW_KEY_RIGHT_CONTROL   345
#define GLFW_KEY_RIGHT_ALT   346
#define GLFW_KEY_RIGHT_SUPER   347
#define GLFW_KEY_MENU   348
#define GLFW_KEY_LAST   GLFW_KEY_MENU

